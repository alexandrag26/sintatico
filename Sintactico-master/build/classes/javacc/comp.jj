/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. comp.jj */
/*@egen*/PARSER_BEGIN(comp)
import java.io.*;
class comp/*@bgen(jjtree)*/implements compTreeConstants/*@egen*/ 
{/*@bgen(jjtree)*/
  protected static JJTcompState jjtree = new JJTcompState();

/*@egen*/
	public static void main( String[] args )throws ParseException, Exception
	{
		try
		{		
     		comp analizador = new comp( System.in ) ;
			SimpleNode root=analizador.Programa();
			System.out.println("\tAnalizador ha terminado exitosamente.");
			System.out.println("\tImprimiendo arbol de sintaxis.");
			root.dump("");			
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			System.out.println("\tAnalizador ha encontrado error.");
		}

	}
}
PARSER_END(comp)

TOKEN : 
{ 
	  <ASIGNACION : "="> //1
	| <PLUS : "+" >  //2
	| <MINUS:"-"> //3
	| <MULTIPLY:"*">  //4
	| <DIVIDE:"/"> //5
	| <INCR: "++" > //6
	| <DECR: "--" > //7
	
}
TOKEN:
{
	  <PUBLIC: "public"> //8
	| <PRIVATE: "private"> //9
	| <STATIC: "static"> //10
	| <VOID: "void"> //11
	| <MAIN: "public static void Main()"> //12
	| <PROGRAMA: "Programa" >  //13
	| <IF: "if" > //14
	| <ELSE:"else" > //15
	| <ELSEIF:"else if" > //16
	| <FOR:"for" > //17
	| <SWITCH:"switch" > //18
	| <CASE:"case" > //19
	| <BREAK:"break" > //20
	| <DEFAUL:"default" > //21
	| <DO:"do" > //22
	| <WHILE:"while" > //23
	| <WRITE:"write" > //24
	| <READ:"read" > //25
	| <IMPORT:"import" > //26
}
TOKEN:
{
      <LPAREN: "(" > //27
	| <RPAREN: ")" > //28
	| <LBRACE: "{" > //29
	| <RBRACE: "}" > //30
	| <LBRACKET: "[" > //31
	| <RBRACKET: "]" > //32
	| <SEMICOLON: ";" > //33
	| <COMMA: "," > //34
	| <DOT: "." > //35
	| <DOUBLECOMMA: "\""> //36
}
TOKEN:
{
	  <EQ: "==" > //37
	| <LE: "<=" > //38
	| <MN: "<" > //39
	| <GE: ">=" > //40
	| <GR: ">" > //41
	| <NE: "!=" > //42
	| <OR: "||" > //43
	| <AND: "&&"> //44
}

TOKEN:
{
	  <INT:"int"> //45
	| <DEC: "float"> //46
	| <CHR: "char"> //47
	| <STR: "String"> //48
	| <NUMBER : (["0"-"9"])+>  //49
	| <IDENTIFIER : ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])*>  //50
	| <DECIMAL : (["0"-"9"])+["."](["0"-"9"])+ > //51
	| <CADENA : <DOUBLECOMMA>["a"-"z","A"-"Z","0"-"9"," "](["a"-"z","A"-"Z","0"-"9"," ",":",";","."])*<DOUBLECOMMA>> //52
	| <CARAC : "'"["a"-"z","A"-"Z","0"-"9"]"'" >//53
	| <DOUBLEPOINT : ":"> //54
}

SKIP : 
{ 
	" "|"\n" | "\r" | "\r\n" | "\t"
}

SimpleNode Programa()       :
{/*@bgen(jjtree) Inicio */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Inicio */
        try {
/*@egen*/
	(Import())*<PROGRAMA><IDENTIFIER><LBRACE>Bloque()<RBRACE><EOF>/*@bgen(jjtree)*/
                                                                       {
                                                                         jjtree.closeNodeScope(jjtn000, true);
                                                                         jjtc000 = false;
                                                                       }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Import()            :
{/*@bgen(jjtree) Importacion */
 SimpleNode jjtn000 = new SimpleNode(JJTIMPORTACION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Importacion */
         try {
/*@egen*/
	 t=<IMPORT><IDENTIFIER><SEMICOLON>/*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                          }
/*@egen*/{jjtn000.value = t.image;}/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void Bloque():
{/*@bgen(jjtree) Bloque */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOQUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Bloque */
        try {
/*@egen*/
	LOOKAHEAD(2)VariablesGlobales() | Principal()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void VariablesGlobales()                               :
{/*@bgen(jjtree) declaracion_variables_globales */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACION_VARIABLES_GLOBALES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declaracion_variables_globales */
        try {
/*@egen*/
	(<PRIVATE>|<PUBLIC>)(<INT>|<DEC>|<STR>|<CHR>) <IDENTIFIER>(<COMMA><IDENTIFIER>)* <SEMICOLON> Bloque()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Principal()     :
{/*@bgen(jjtree) Main */
        SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	TokenAsignaciones.SetTables();	
}
{/*@bgen(jjtree) Main */
        try {
/*@egen*/
	<MAIN>
	<LBRACE>Sentencias()<RBRACE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 	
}


void VariablesLocales():
{/*@bgen(jjtree) VariablesLocales */
        SimpleNode jjtn000 = new SimpleNode(JJTVARIABLESLOCALES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	int td;
	Token var;	
}
{/*@bgen(jjtree) VariablesLocales */
try {
/*@egen*/
(
	(TiposDatos())
	{
		td = token.kind;
	}
	var = <IDENTIFIER> 
	{		
		TokenAsignaciones.InsertarSimbolo(var, td);
	} 
	[VariablesAsignacion(var)]
	(
		<COMMA>
		var = <IDENTIFIER> 
		{		
			TokenAsignaciones.InsertarSimbolo(var, td);
		} 
		[VariablesAsignacion(var)]
	)*	
	<SEMICOLON> 
)
	(VS())/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void VariablesAsignacion(Token v1):
{/*@bgen(jjtree) VariablesAsignacion */
        SimpleNode jjtn000 = new SimpleNode(JJTVARIABLESASIGNACION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token v2;
	Token v3;
	String res;	
	boolean imp = false;
}
{/*@bgen(jjtree) VariablesAsignacion */
        try {
/*@egen*/
	<ASIGNACION>
	(TiposAsignaciones())
	  {  
		v2 = token;
		res = TokenAsignaciones.checkAsing(v1, v2);
		
		if(res != " ")
		{
			System.out.println(res);
			imp = true;
		}
	  }
	  (OpAritmetico()
	  TiposAsignaciones()
	  {  
		v3 = token;
		res = TokenAsignaciones.checkAsing(v1, v3);
		
		if(res != " " && !imp)
		{
			System.out.println(res);
		}
	  })*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void VS()     :
{}
{
	LOOKAHEAD(3)VariablesLocales() | Sentencias()
}

void Sentencias():
{/*@bgen(jjtree) Sentencias */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Sentencias */
        try {
/*@egen*/
	(	
	  VariablesLocales()	
    | SentenciaIf() 	
	| SentenciaFor()
	| SentenciaDo()	
	| LOOKAHEAD(2)SentenciaAsignacion()<SEMICOLON>{TokenAsignaciones.segunda = 0;}
	| SentenciaWrite()
	| SentenciaRead()
	| SentenciaSwitch()
	)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//Sentencia IF
void SentenciaIf()     :
{/*@bgen(jjtree) IF */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IF */
        try {
/*@egen*/
	<IF><LPAREN> A() <RPAREN> <LBRACE> Sentencias() <RBRACE> (Sino())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void Sino()       :
{/*@bgen(jjtree) ELSEIF */
  SimpleNode jjtn000 = new SimpleNode(JJTELSEIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ELSEIF */
        try {
/*@egen*/
	<ELSE><LBRACE> Sentencias() <RBRACE> | <ELSEIF> <LPAREN> A() <RPAREN> <LBRACE> Sentencias() <RBRACE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void A()                           :
{/*@bgen(jjtree) comparaciondecomparaciones */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARACIONDECOMPARACIONES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) comparaciondecomparaciones */
          try {
/*@egen*/
	  Comparaciones() ([(<AND>|<OR>)] Comparaciones())*/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}
//Fin sentencia if

void Comparaciones():
{/*@bgen(jjtree) Comparaciones */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARACIONES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Comparaciones */
        try {
/*@egen*/
	Valor()Operadores()Valor()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void Valor():
{/*@bgen(jjtree) Valor */
  SimpleNode jjtn000 = new SimpleNode(JJTVALOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Valor */
        try {
/*@egen*/
	LOOKAHEAD(2) (<IDENTIFIER> | <NUMBER>) | Expresion()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void Expresion():
{/*@bgen(jjtree) Expresion */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expresion */
    try {
/*@egen*/
    LOOKAHEAD(2)(<NUMBER> | <IDENTIFIER>)
	|(<IDENTIFIER>|<NUMBER>) OpAritmetico() (<IDENTIFIER>|<NUMBER>)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void Operadores()       :
{/*@bgen(jjtree) oplogi */
  SimpleNode jjtn000 = new SimpleNode(JJTOPLOGI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) oplogi */
            try {
/*@egen*/
	    <EQ> 
	  | <LE> 
	  | <GE> 
	  | <NE> 
	  | <GR> 
	  | <MN>/*@bgen(jjtree)*/
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
            }
/*@egen*/ 
}

int OpAritmetico()       :
{/*@bgen(jjtree) oparit */
  SimpleNode jjtn000 = new SimpleNode(JJTOPARIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) oparit */
          try {
/*@egen*/
	  (<PLUS>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {return 1;})
	| (<MINUS>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {return 1;})
	| (<MULTIPLY>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {return 1;})
	| (<DIVIDE>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {return 1;})
	| ({return 0;})/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{return 0;}/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void TiposDatos()         :
{/*@bgen(jjtree) tipodato */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPODATO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tipodato */
         try {
/*@egen*/
	 <INT>
	|<DEC>
	|<STR>
	|<CHR>/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}


//Sentencia FOR
void SentenciaFor()    :
{/*@bgen(jjtree) FOR */
  SimpleNode jjtn000 = new SimpleNode(JJTFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FOR */
        try {
/*@egen*/
	<FOR> <LPAREN>(DeclaracionUnaVariable()|SentenciaAsignacion())<SEMICOLON> Comparaciones() <SEMICOLON> SentenciaAsignacion() <RPAREN> <LBRACE> Sentencias() <RBRACE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void DeclaracionUnaVariable()                 :
{/*@bgen(jjtree) declararvariable */
        SimpleNode jjtn000 = new SimpleNode(JJTDECLARARVARIABLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	int td;
	Token var;	
}
{/*@bgen(jjtree) declararvariable */
        try {
/*@egen*/	
	(TiposDatos())
	{
		td = token.kind;
	}
	var = <IDENTIFIER> 
	{		
		TokenAsignaciones.InsertarSimbolo(var, td);
	} 
	[VariablesAsignacion(var)]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/		
}

//Sentencia DO
void SentenciaDo()   :
{/*@bgen(jjtree) DO */
  SimpleNode jjtn000 = new SimpleNode(JJTDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DO */
        try {
/*@egen*/
	<DO> <LBRACE>Sentencias() <RBRACE> <WHILE> <LPAREN> Comparaciones() <RPAREN> | SentenciaWhile()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
		
}
void SentenciaWhile()      :
{/*@bgen(jjtree) WHILE */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WHILE */
        try {
/*@egen*/
	<WHILE> <LPAREN> Comparaciones() <RPAREN> <LBRACE> Sentencias() <RBRACE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//Sentencia ASIGNACION
void SentenciaAsignacion():
{/*@bgen(jjtree) SentenciaAsignacion */
        SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIAASIGNACION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token v1;
	Token v2;
	Token v3;
	int aux;
	String res;
	boolean imp = false;
}
{/*@bgen(jjtree) SentenciaAsignacion */
  try {
/*@egen*/
  v1 = <IDENTIFIER> 
  (<ASIGNACION>
  (TiposAsignaciones())
  {  
    v2 = token;
	res = TokenAsignaciones.checkAsing(v1, v2);
	
	if(res != " ")
	{
		System.out.println(res);
		imp = true;
	}
  }
  (LOOKAHEAD(2)OpAritmetico()
  TiposAsignaciones()
  {  
    v3 = token;
	res = TokenAsignaciones.checkAsing(v1, v3);
	
	if(res != " " && !imp)
	{
		System.out.println(res);
	}
  })*  
  |
  (<INCR>|<DECR>)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {  
	res = TokenAsignaciones.checkVariable(v1);
	
	if(res != " ")	
		System.out.println(res);	
  })/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  
  //SentenciaAsignacion ya trae <SEMICOLON> en el metodo Sentencias()
}

void TiposAsignaciones():
{/*@bgen(jjtree) TiposAsignaciones */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOSASIGNACIONES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TiposAsignaciones */
          try {
/*@egen*/
	  <IDENTIFIER> 
	| <NUMBER> 
	| <DECIMAL> 
	| <CADENA> 
	| <CARAC>/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

//Sentencia WRITE
void SentenciaWrite()      :
{/*@bgen(jjtree) WRITE */
  SimpleNode jjtn000 = new SimpleNode(JJTWRITE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WRITE */
        try {
/*@egen*/
	<WRITE> <LPAREN> (Expresion()(<PLUS><CADENA>)*|<CADENA>(<PLUS>Expresion())*)* <RPAREN> <SEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

//Sentencia READ
void SentenciaRead()     :
{/*@bgen(jjtree) READ */
  SimpleNode jjtn000 = new SimpleNode(JJTREAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) READ */
        try {
/*@egen*/
	<READ><LPAREN><RPAREN><SEMICOLON>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void SentenciaSwitch()       :
{/*@bgen(jjtree) SWITCH */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SWITCH */
        try {
/*@egen*/
	<SWITCH><LPAREN><IDENTIFIER><RPAREN><LBRACE>(<CASE>(<IDENTIFIER>|<CADENA>|<CARAC>|<NUMBER>|<DECIMAL>)<DOUBLEPOINT>(SentenciaAsignacion()<SEMICOLON>)+ <BREAK><SEMICOLON>)+[<DEFAUL><DOUBLEPOINT>(SentenciaAsignacion()<SEMICOLON>)<BREAK><SEMICOLON>]<RBRACE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

